// Code generated by protoc-gen-go. DO NOT EDIT.
// source: face.proto

package face_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImageParam_Channel int32

const (
	ImageParam_RGB  ImageParam_Channel = 0
	ImageParam_GRAY ImageParam_Channel = 1
)

var ImageParam_Channel_name = map[int32]string{
	0: "RGB",
	1: "GRAY",
}

var ImageParam_Channel_value = map[string]int32{
	"RGB":  0,
	"GRAY": 1,
}

func (x ImageParam_Channel) String() string {
	return proto.EnumName(ImageParam_Channel_name, int32(x))
}

func (ImageParam_Channel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{3, 0}
}

type FaceParam_Landmark_Type int32

const (
	FaceParam_Landmark_LEFT_EYE               FaceParam_Landmark_Type = 0
	FaceParam_Landmark_RIGHT_EYE              FaceParam_Landmark_Type = 1
	FaceParam_Landmark_LEFT_OF_LEFT_EYEBROW   FaceParam_Landmark_Type = 2
	FaceParam_Landmark_RIGHT_OF_LEFT_EYEBROW  FaceParam_Landmark_Type = 3
	FaceParam_Landmark_LEFT_OF_RIGHT_EYEBROW  FaceParam_Landmark_Type = 4
	FaceParam_Landmark_RIGHT_OF_RIGHT_EYEBROW FaceParam_Landmark_Type = 5
	FaceParam_Landmark_MIDPOINT_BETWEEN_EYES  FaceParam_Landmark_Type = 6
	FaceParam_Landmark_NOSE_TIP               FaceParam_Landmark_Type = 7
	FaceParam_Landmark_UPPER_LIP              FaceParam_Landmark_Type = 8
	FaceParam_Landmark_LOWER_LIP              FaceParam_Landmark_Type = 9
	FaceParam_Landmark_MOUTH_LEFT             FaceParam_Landmark_Type = 10
	FaceParam_Landmark_MOUTH_RIGHT            FaceParam_Landmark_Type = 11
	FaceParam_Landmark_MOUTH_CENTER           FaceParam_Landmark_Type = 12
)

var FaceParam_Landmark_Type_name = map[int32]string{
	0:  "LEFT_EYE",
	1:  "RIGHT_EYE",
	2:  "LEFT_OF_LEFT_EYEBROW",
	3:  "RIGHT_OF_LEFT_EYEBROW",
	4:  "LEFT_OF_RIGHT_EYEBROW",
	5:  "RIGHT_OF_RIGHT_EYEBROW",
	6:  "MIDPOINT_BETWEEN_EYES",
	7:  "NOSE_TIP",
	8:  "UPPER_LIP",
	9:  "LOWER_LIP",
	10: "MOUTH_LEFT",
	11: "MOUTH_RIGHT",
	12: "MOUTH_CENTER",
}

var FaceParam_Landmark_Type_value = map[string]int32{
	"LEFT_EYE":               0,
	"RIGHT_EYE":              1,
	"LEFT_OF_LEFT_EYEBROW":   2,
	"RIGHT_OF_LEFT_EYEBROW":  3,
	"LEFT_OF_RIGHT_EYEBROW":  4,
	"RIGHT_OF_RIGHT_EYEBROW": 5,
	"MIDPOINT_BETWEEN_EYES":  6,
	"NOSE_TIP":               7,
	"UPPER_LIP":              8,
	"LOWER_LIP":              9,
	"MOUTH_LEFT":             10,
	"MOUTH_RIGHT":            11,
	"MOUTH_CENTER":           12,
}

func (x FaceParam_Landmark_Type) String() string {
	return proto.EnumName(FaceParam_Landmark_Type_name, int32(x))
}

func (FaceParam_Landmark_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{6, 0, 0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type EmptyRequest struct {
	// business information of client requestor
	Requestor            *Requestor `protobuf:"bytes,100,opt,name=requestor,proto3" json:"requestor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{1}
}

func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

func (m *EmptyRequest) GetRequestor() *Requestor {
	if m != nil {
		return m.Requestor
	}
	return nil
}

// Face feature extracted by a face recognition learning model.
type FaceFeature struct {
	// Face feature representation.
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Face model version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Expire time of the feature, represented as the number of milliseconds since
	// the epoch. If the system time is larger than the expire time, then this
	// feature becomes invalid.
	ExpireTime int64 `protobuf:"varint,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// The update time of the feature.
	UpdateTime           int64    `protobuf:"varint,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaceFeature) Reset()         { *m = FaceFeature{} }
func (m *FaceFeature) String() string { return proto.CompactTextString(m) }
func (*FaceFeature) ProtoMessage()    {}
func (*FaceFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{2}
}

func (m *FaceFeature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaceFeature.Unmarshal(m, b)
}
func (m *FaceFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaceFeature.Marshal(b, m, deterministic)
}
func (m *FaceFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceFeature.Merge(m, src)
}
func (m *FaceFeature) XXX_Size() int {
	return xxx_messageInfo_FaceFeature.Size(m)
}
func (m *FaceFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceFeature.DiscardUnknown(m)
}

var xxx_messageInfo_FaceFeature proto.InternalMessageInfo

func (m *FaceFeature) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FaceFeature) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FaceFeature) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *FaceFeature) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

// ImageParam is a collection of parameters of an image
type ImageParam struct {
	Width                int32              `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height               int32              `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Channel              ImageParam_Channel `protobuf:"varint,3,opt,name=channel,proto3,enum=face_service.ImageParam_Channel" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ImageParam) Reset()         { *m = ImageParam{} }
func (m *ImageParam) String() string { return proto.CompactTextString(m) }
func (*ImageParam) ProtoMessage()    {}
func (*ImageParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{3}
}

func (m *ImageParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageParam.Unmarshal(m, b)
}
func (m *ImageParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageParam.Marshal(b, m, deterministic)
}
func (m *ImageParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageParam.Merge(m, src)
}
func (m *ImageParam) XXX_Size() int {
	return xxx_messageInfo_ImageParam.Size(m)
}
func (m *ImageParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageParam.DiscardUnknown(m)
}

var xxx_messageInfo_ImageParam proto.InternalMessageInfo

func (m *ImageParam) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ImageParam) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ImageParam) GetChannel() ImageParam_Channel {
	if m != nil {
		return m.Channel
	}
	return ImageParam_RGB
}

// Image contains picture data and parameters of the image
type Image struct {
	// Content of image, binary format.
	ImageBytes []byte      `protobuf:"bytes,1,opt,name=image_bytes,json=imageBytes,proto3" json:"image_bytes,omitempty"`
	ImageParam *ImageParam `protobuf:"bytes,2,opt,name=image_param,json=imageParam,proto3" json:"image_param,omitempty"`
	// Image_source is the ID/name of the camera that takes this image.
	ImageSource string `protobuf:"bytes,3,opt,name=image_source,json=imageSource,proto3" json:"image_source,omitempty"`
	// Image sequence
	ImageSequence        int64    `protobuf:"varint,4,opt,name=image_sequence,json=imageSequence,proto3" json:"image_sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{4}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetImageBytes() []byte {
	if m != nil {
		return m.ImageBytes
	}
	return nil
}

func (m *Image) GetImageParam() *ImageParam {
	if m != nil {
		return m.ImageParam
	}
	return nil
}

func (m *Image) GetImageSource() string {
	if m != nil {
		return m.ImageSource
	}
	return ""
}

func (m *Image) GetImageSequence() int64 {
	if m != nil {
		return m.ImageSequence
	}
	return 0
}

// CroppingBox defines the coordinates of the top left corner and the width
// and height of a cropping box in an image.
type CroppingBox struct {
	// The coordinate of the top left corner
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	// The width and length of the cropping box
	Width  int32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// The sequence number of an image, not required to fill. Used in
	// video stream to associate multiple face cropping boxes in the
	// same image together.
	ImageSequence int64 `protobuf:"varint,5,opt,name=image_sequence,json=imageSequence,proto3" json:"image_sequence,omitempty"`
	// The width and length of the frame
	FrameWidth           int32    `protobuf:"varint,6,opt,name=frame_width,json=frameWidth,proto3" json:"frame_width,omitempty"`
	FrameHeight          int32    `protobuf:"varint,7,opt,name=frame_height,json=frameHeight,proto3" json:"frame_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CroppingBox) Reset()         { *m = CroppingBox{} }
func (m *CroppingBox) String() string { return proto.CompactTextString(m) }
func (*CroppingBox) ProtoMessage()    {}
func (*CroppingBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{5}
}

func (m *CroppingBox) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CroppingBox.Unmarshal(m, b)
}
func (m *CroppingBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CroppingBox.Marshal(b, m, deterministic)
}
func (m *CroppingBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CroppingBox.Merge(m, src)
}
func (m *CroppingBox) XXX_Size() int {
	return xxx_messageInfo_CroppingBox.Size(m)
}
func (m *CroppingBox) XXX_DiscardUnknown() {
	xxx_messageInfo_CroppingBox.DiscardUnknown(m)
}

var xxx_messageInfo_CroppingBox proto.InternalMessageInfo

func (m *CroppingBox) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *CroppingBox) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *CroppingBox) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *CroppingBox) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CroppingBox) GetImageSequence() int64 {
	if m != nil {
		return m.ImageSequence
	}
	return 0
}

func (m *CroppingBox) GetFrameWidth() int32 {
	if m != nil {
		return m.FrameWidth
	}
	return 0
}

func (m *CroppingBox) GetFrameHeight() int32 {
	if m != nil {
		return m.FrameHeight
	}
	return 0
}

// FaceParam is a collection of parameters of a single face found in a
// picture.
type FaceParam struct {
	// Cropping box enclose only the skin part of the face.
	// The coordinates of the box are in the original image's scale.
	CroppingBox *CroppingBox          `protobuf:"bytes,1,opt,name=cropping_box,json=croppingBox,proto3" json:"cropping_box,omitempty"`
	Landmark    []*FaceParam_Landmark `protobuf:"bytes,3,rep,name=landmark,proto3" json:"landmark,omitempty"`
	// Roll angle indicates how much clockwise/anti-clockwise the face is rotated
	// relative to the image vertical and about the axis perpendicular to the
	// face. Range [-180,180].
	RollAngle float32 `protobuf:"fixed32,4,opt,name=roll_angle,json=rollAngle,proto3" json:"roll_angle,omitempty"`
	// Yaw angle. Indicates how much leftward/rightward the face is pointing
	// relative to the vertical plane perpendicular to the image. Range
	// [-180,180].
	YawAngle float32 `protobuf:"fixed32,5,opt,name=yaw_angle,json=yawAngle,proto3" json:"yaw_angle,omitempty"`
	// Pitch angle. Indicates how much upwards/downwards the face is pointing
	// relative to the image's horizontal plane. Range [-180,180].
	TiltAngle float32 `protobuf:"fixed32,6,opt,name=tilt_angle,json=tiltAngle,proto3" json:"tilt_angle,omitempty"`
	// Detection confidence score is in the range [0,1].
	DetectionScore float32 `protobuf:"fixed32,7,opt,name=detection_score,json=detectionScore,proto3" json:"detection_score,omitempty"`
	// This score indicates overall quality of the face and its relative
	// suitability for using it in face recognition.
	FaceQualityScore float32 `protobuf:"fixed32,8,opt,name=face_quality_score,json=faceQualityScore,proto3" json:"face_quality_score,omitempty"`
	// liveness score, between [0, 1], indicates the likelihood of the image being
	// taken from pictures/monitors/cell phones/masks. low score means more
	// likely to be a real face.
	LivenessScore        float32  `protobuf:"fixed32,9,opt,name=liveness_score,json=livenessScore,proto3" json:"liveness_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaceParam) Reset()         { *m = FaceParam{} }
func (m *FaceParam) String() string { return proto.CompactTextString(m) }
func (*FaceParam) ProtoMessage()    {}
func (*FaceParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{6}
}

func (m *FaceParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaceParam.Unmarshal(m, b)
}
func (m *FaceParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaceParam.Marshal(b, m, deterministic)
}
func (m *FaceParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceParam.Merge(m, src)
}
func (m *FaceParam) XXX_Size() int {
	return xxx_messageInfo_FaceParam.Size(m)
}
func (m *FaceParam) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceParam.DiscardUnknown(m)
}

var xxx_messageInfo_FaceParam proto.InternalMessageInfo

func (m *FaceParam) GetCroppingBox() *CroppingBox {
	if m != nil {
		return m.CroppingBox
	}
	return nil
}

func (m *FaceParam) GetLandmark() []*FaceParam_Landmark {
	if m != nil {
		return m.Landmark
	}
	return nil
}

func (m *FaceParam) GetRollAngle() float32 {
	if m != nil {
		return m.RollAngle
	}
	return 0
}

func (m *FaceParam) GetYawAngle() float32 {
	if m != nil {
		return m.YawAngle
	}
	return 0
}

func (m *FaceParam) GetTiltAngle() float32 {
	if m != nil {
		return m.TiltAngle
	}
	return 0
}

func (m *FaceParam) GetDetectionScore() float32 {
	if m != nil {
		return m.DetectionScore
	}
	return 0
}

func (m *FaceParam) GetFaceQualityScore() float32 {
	if m != nil {
		return m.FaceQualityScore
	}
	return 0
}

func (m *FaceParam) GetLivenessScore() float32 {
	if m != nil {
		return m.LivenessScore
	}
	return 0
}

type FaceParam_Landmark struct {
	// Those landmark positions may fall outside the bounds of the image
	// when the face is near the edges of the image.
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	// Typically we use 5 key landmark points: LEFT_EYE, RIGHT_EYE, NOSE_TIP,
	// MOUTH_LEFT, MOUTH_RIGHT
	Type FaceParam_Landmark_Type `protobuf:"varint,3,opt,name=type,proto3,enum=face_service.FaceParam_Landmark_Type" json:"type,omitempty"`
	// Per landmark location confidence score. The confidence score
	// should be in range [0.0, 1.0] and high score indicates high confidence.
	Confidence           float32  `protobuf:"fixed32,4,opt,name=confidence,proto3" json:"confidence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaceParam_Landmark) Reset()         { *m = FaceParam_Landmark{} }
func (m *FaceParam_Landmark) String() string { return proto.CompactTextString(m) }
func (*FaceParam_Landmark) ProtoMessage()    {}
func (*FaceParam_Landmark) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{6, 0}
}

func (m *FaceParam_Landmark) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaceParam_Landmark.Unmarshal(m, b)
}
func (m *FaceParam_Landmark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaceParam_Landmark.Marshal(b, m, deterministic)
}
func (m *FaceParam_Landmark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceParam_Landmark.Merge(m, src)
}
func (m *FaceParam_Landmark) XXX_Size() int {
	return xxx_messageInfo_FaceParam_Landmark.Size(m)
}
func (m *FaceParam_Landmark) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceParam_Landmark.DiscardUnknown(m)
}

var xxx_messageInfo_FaceParam_Landmark proto.InternalMessageInfo

func (m *FaceParam_Landmark) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *FaceParam_Landmark) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *FaceParam_Landmark) GetType() FaceParam_Landmark_Type {
	if m != nil {
		return m.Type
	}
	return FaceParam_Landmark_LEFT_EYE
}

func (m *FaceParam_Landmark) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type FaceParams struct {
	FaceParam            []*FaceParam `protobuf:"bytes,1,rep,name=face_param,json=faceParam,proto3" json:"face_param,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FaceParams) Reset()         { *m = FaceParams{} }
func (m *FaceParams) String() string { return proto.CompactTextString(m) }
func (*FaceParams) ProtoMessage()    {}
func (*FaceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{7}
}

func (m *FaceParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaceParams.Unmarshal(m, b)
}
func (m *FaceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaceParams.Marshal(b, m, deterministic)
}
func (m *FaceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceParams.Merge(m, src)
}
func (m *FaceParams) XXX_Size() int {
	return xxx_messageInfo_FaceParams.Size(m)
}
func (m *FaceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceParams.DiscardUnknown(m)
}

var xxx_messageInfo_FaceParams proto.InternalMessageInfo

func (m *FaceParams) GetFaceParam() []*FaceParam {
	if m != nil {
		return m.FaceParam
	}
	return nil
}

// Face contains all information about a captured face: image, the capture time
// of the image, face feature, detailed face information, and the identities
// matched
type Face struct {
	FaceFeature *FaceFeature `protobuf:"bytes,1,opt,name=face_feature,json=faceFeature,proto3" json:"face_feature,omitempty"`
	FaceParam   *FaceParam   `protobuf:"bytes,2,opt,name=face_param,json=faceParam,proto3" json:"face_param,omitempty"`
	Image       *Image       `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// A list of matched identity id's.
	MatchedIdentities *MatchedIdentities `protobuf:"bytes,4,opt,name=matched_identities,json=matchedIdentities,proto3" json:"matched_identities,omitempty"`
	// The time when the corresponding image is received or captured, represented
	// as the milliseconds from the epoch.
	ImageTimeStamp       int64    `protobuf:"varint,5,opt,name=image_time_stamp,json=imageTimeStamp,proto3" json:"image_time_stamp,omitempty"`
	IsStranger           bool     `protobuf:"varint,6,opt,name=is_stranger,json=isStranger,proto3" json:"is_stranger,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Face) Reset()         { *m = Face{} }
func (m *Face) String() string { return proto.CompactTextString(m) }
func (*Face) ProtoMessage()    {}
func (*Face) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{8}
}

func (m *Face) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Face.Unmarshal(m, b)
}
func (m *Face) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Face.Marshal(b, m, deterministic)
}
func (m *Face) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Face.Merge(m, src)
}
func (m *Face) XXX_Size() int {
	return xxx_messageInfo_Face.Size(m)
}
func (m *Face) XXX_DiscardUnknown() {
	xxx_messageInfo_Face.DiscardUnknown(m)
}

var xxx_messageInfo_Face proto.InternalMessageInfo

func (m *Face) GetFaceFeature() *FaceFeature {
	if m != nil {
		return m.FaceFeature
	}
	return nil
}

func (m *Face) GetFaceParam() *FaceParam {
	if m != nil {
		return m.FaceParam
	}
	return nil
}

func (m *Face) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Face) GetMatchedIdentities() *MatchedIdentities {
	if m != nil {
		return m.MatchedIdentities
	}
	return nil
}

func (m *Face) GetImageTimeStamp() int64 {
	if m != nil {
		return m.ImageTimeStamp
	}
	return 0
}

func (m *Face) GetIsStranger() bool {
	if m != nil {
		return m.IsStranger
	}
	return false
}

// A collection of Face
type Faces struct {
	Face []*Face `protobuf:"bytes,1,rep,name=face,proto3" json:"face,omitempty"`
	// business information of client requestor
	Requestor            *Requestor `protobuf:"bytes,100,opt,name=requestor,proto3" json:"requestor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Faces) Reset()         { *m = Faces{} }
func (m *Faces) String() string { return proto.CompactTextString(m) }
func (*Faces) ProtoMessage()    {}
func (*Faces) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{9}
}

func (m *Faces) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Faces.Unmarshal(m, b)
}
func (m *Faces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Faces.Marshal(b, m, deterministic)
}
func (m *Faces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Faces.Merge(m, src)
}
func (m *Faces) XXX_Size() int {
	return xxx_messageInfo_Faces.Size(m)
}
func (m *Faces) XXX_DiscardUnknown() {
	xxx_messageInfo_Faces.DiscardUnknown(m)
}

var xxx_messageInfo_Faces proto.InternalMessageInfo

func (m *Faces) GetFace() []*Face {
	if m != nil {
		return m.Face
	}
	return nil
}

func (m *Faces) GetRequestor() *Requestor {
	if m != nil {
		return m.Requestor
	}
	return nil
}

// All the information to be passed to the Face Service for face detection,
// face anti-spoof, and face feature extraction. It contains an image,
// the locations of face cropping boxes (optional), what actions to perform:
// face detection, face anti-spoof, and/or face feature extraction.
type FaceRequest struct {
	Image *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// If faces are already dected, then we will pass the corresponding
	// information: the locations of cropping boxes of those detected faces and
	// the key landmarks.
	FaceParams *FaceParams `protobuf:"bytes,2,opt,name=face_params,json=faceParams,proto3" json:"face_params,omitempty"`
	// If we should perform face detection. If this is enabled, we will ignore
	// the information contained in face_params and re-populate that information.
	FaceDetection bool `protobuf:"varint,3,opt,name=face_detection,json=faceDetection,proto3" json:"face_detection,omitempty"`
	// If we should perform anti-spoof detection.
	LivenessDetection bool `protobuf:"varint,4,opt,name=liveness_detection,json=livenessDetection,proto3" json:"liveness_detection,omitempty"`
	// If we should perform feature extraction.
	FeatureExtraction bool `protobuf:"varint,5,opt,name=feature_extraction,json=featureExtraction,proto3" json:"feature_extraction,omitempty"`
	// If both livness_detection and feature_extraction is enabled, if
	// liveness_score is higher than this threshold, then we will not perform
	// feature extraction.
	LivenessThreshold float64 `protobuf:"fixed64,6,opt,name=liveness_threshold,json=livenessThreshold,proto3" json:"liveness_threshold,omitempty"`
	// Minimum face size to be detected
	FaceDetectionMinimumSize int32 `protobuf:"varint,7,opt,name=face_detection_minimum_size,json=faceDetectionMinimumSize,proto3" json:"face_detection_minimum_size,omitempty"`
	// business information of client requestor
	Requestor            *Requestor `protobuf:"bytes,100,opt,name=requestor,proto3" json:"requestor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FaceRequest) Reset()         { *m = FaceRequest{} }
func (m *FaceRequest) String() string { return proto.CompactTextString(m) }
func (*FaceRequest) ProtoMessage()    {}
func (*FaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{10}
}

func (m *FaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaceRequest.Unmarshal(m, b)
}
func (m *FaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaceRequest.Marshal(b, m, deterministic)
}
func (m *FaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceRequest.Merge(m, src)
}
func (m *FaceRequest) XXX_Size() int {
	return xxx_messageInfo_FaceRequest.Size(m)
}
func (m *FaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FaceRequest proto.InternalMessageInfo

func (m *FaceRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *FaceRequest) GetFaceParams() *FaceParams {
	if m != nil {
		return m.FaceParams
	}
	return nil
}

func (m *FaceRequest) GetFaceDetection() bool {
	if m != nil {
		return m.FaceDetection
	}
	return false
}

func (m *FaceRequest) GetLivenessDetection() bool {
	if m != nil {
		return m.LivenessDetection
	}
	return false
}

func (m *FaceRequest) GetFeatureExtraction() bool {
	if m != nil {
		return m.FeatureExtraction
	}
	return false
}

func (m *FaceRequest) GetLivenessThreshold() float64 {
	if m != nil {
		return m.LivenessThreshold
	}
	return 0
}

func (m *FaceRequest) GetFaceDetectionMinimumSize() int32 {
	if m != nil {
		return m.FaceDetectionMinimumSize
	}
	return 0
}

func (m *FaceRequest) GetRequestor() *Requestor {
	if m != nil {
		return m.Requestor
	}
	return nil
}

// The reply message of the Face Service
type FaceReply struct {
	FaceParams           *FaceParams    `protobuf:"bytes,1,opt,name=face_params,json=faceParams,proto3" json:"face_params,omitempty"`
	FaceFeature          []*FaceFeature `protobuf:"bytes,2,rep,name=face_feature,json=faceFeature,proto3" json:"face_feature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FaceReply) Reset()         { *m = FaceReply{} }
func (m *FaceReply) String() string { return proto.CompactTextString(m) }
func (*FaceReply) ProtoMessage()    {}
func (*FaceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{11}
}

func (m *FaceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaceReply.Unmarshal(m, b)
}
func (m *FaceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaceReply.Marshal(b, m, deterministic)
}
func (m *FaceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceReply.Merge(m, src)
}
func (m *FaceReply) XXX_Size() int {
	return xxx_messageInfo_FaceReply.Size(m)
}
func (m *FaceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceReply.DiscardUnknown(m)
}

var xxx_messageInfo_FaceReply proto.InternalMessageInfo

func (m *FaceReply) GetFaceParams() *FaceParams {
	if m != nil {
		return m.FaceParams
	}
	return nil
}

func (m *FaceReply) GetFaceFeature() []*FaceFeature {
	if m != nil {
		return m.FaceFeature
	}
	return nil
}

type FeatureUpdate struct {
	// An id of person's identity
	IdentityId string `protobuf:"bytes,1,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	// The name of the person.
	IdentityName string `protobuf:"bytes,5,opt,name=identity_name,json=identityName,proto3" json:"identity_name,omitempty"`
	// A face feature of the person.
	FaceFeature *FaceFeature `protobuf:"bytes,2,opt,name=face_feature,json=faceFeature,proto3" json:"face_feature,omitempty"`
	// A face feature id to differentiate different features extracted
	// for the same person. It may not be unique across people.
	FeatureId string `protobuf:"bytes,3,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	// The feature library which this person is associated with. The face
	// match service uses this information to filter out people's features
	// to be matched on.
	FeatureLibrary *FeatureLibrary `protobuf:"bytes,4,opt,name=feature_library,json=featureLibrary,proto3" json:"feature_library,omitempty"`
	// business information of client requestor
	Requestor            *Requestor `protobuf:"bytes,100,opt,name=requestor,proto3" json:"requestor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FeatureUpdate) Reset()         { *m = FeatureUpdate{} }
func (m *FeatureUpdate) String() string { return proto.CompactTextString(m) }
func (*FeatureUpdate) ProtoMessage()    {}
func (*FeatureUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{12}
}

func (m *FeatureUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureUpdate.Unmarshal(m, b)
}
func (m *FeatureUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureUpdate.Marshal(b, m, deterministic)
}
func (m *FeatureUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureUpdate.Merge(m, src)
}
func (m *FeatureUpdate) XXX_Size() int {
	return xxx_messageInfo_FeatureUpdate.Size(m)
}
func (m *FeatureUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureUpdate proto.InternalMessageInfo

func (m *FeatureUpdate) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *FeatureUpdate) GetIdentityName() string {
	if m != nil {
		return m.IdentityName
	}
	return ""
}

func (m *FeatureUpdate) GetFaceFeature() *FaceFeature {
	if m != nil {
		return m.FaceFeature
	}
	return nil
}

func (m *FeatureUpdate) GetFeatureId() string {
	if m != nil {
		return m.FeatureId
	}
	return ""
}

func (m *FeatureUpdate) GetFeatureLibrary() *FeatureLibrary {
	if m != nil {
		return m.FeatureLibrary
	}
	return nil
}

func (m *FeatureUpdate) GetRequestor() *Requestor {
	if m != nil {
		return m.Requestor
	}
	return nil
}

// FaceMatchOptions allow clients to control the face match operation
type FaceMatchOptions struct {
	// The threshold is used to determine if two features are really the same
	// person. The value is between 0 to 100.
	MatchThreshold float64 `protobuf:"fixed64,1,opt,name=match_threshold,json=matchThreshold,proto3" json:"match_threshold,omitempty"`
	// Used in 1:N matching to determine the number of matches returned.
	TopN int32 `protobuf:"varint,2,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	// Tells the face match server which feature library we should use to match
	// a face feature.
	FeatureLibrary *FeatureLibrary `protobuf:"bytes,3,opt,name=feature_library,json=featureLibrary,proto3" json:"feature_library,omitempty"`
	// The next two fields split a feature library into a number of pieces,
	// specified by num_pieces, and match happens only in the piece designated
	// by piece_sequence. These two are usually used for a huge feature library
	// and it allows a client to send multiple match calls simultaneously to
	// the server and each call only matches on a smaller piece of the whole
	// feature library. The client would decide how to combine the match results
	// from multiple calls.
	NumPieces int32 `protobuf:"varint,4,opt,name=num_pieces,json=numPieces,proto3" json:"num_pieces,omitempty"`
	// piece_sequence starts from 0.
	PieceSequence        int32    `protobuf:"varint,5,opt,name=piece_sequence,json=pieceSequence,proto3" json:"piece_sequence,omitempty"`
	DisableCheckCrc      bool     `protobuf:"varint,6,opt,name=disable_check_crc,json=disableCheckCrc,proto3" json:"disable_check_crc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaceMatchOptions) Reset()         { *m = FaceMatchOptions{} }
func (m *FaceMatchOptions) String() string { return proto.CompactTextString(m) }
func (*FaceMatchOptions) ProtoMessage()    {}
func (*FaceMatchOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{13}
}

func (m *FaceMatchOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaceMatchOptions.Unmarshal(m, b)
}
func (m *FaceMatchOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaceMatchOptions.Marshal(b, m, deterministic)
}
func (m *FaceMatchOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceMatchOptions.Merge(m, src)
}
func (m *FaceMatchOptions) XXX_Size() int {
	return xxx_messageInfo_FaceMatchOptions.Size(m)
}
func (m *FaceMatchOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceMatchOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FaceMatchOptions proto.InternalMessageInfo

func (m *FaceMatchOptions) GetMatchThreshold() float64 {
	if m != nil {
		return m.MatchThreshold
	}
	return 0
}

func (m *FaceMatchOptions) GetTopN() int32 {
	if m != nil {
		return m.TopN
	}
	return 0
}

func (m *FaceMatchOptions) GetFeatureLibrary() *FeatureLibrary {
	if m != nil {
		return m.FeatureLibrary
	}
	return nil
}

func (m *FaceMatchOptions) GetNumPieces() int32 {
	if m != nil {
		return m.NumPieces
	}
	return 0
}

func (m *FaceMatchOptions) GetPieceSequence() int32 {
	if m != nil {
		return m.PieceSequence
	}
	return 0
}

func (m *FaceMatchOptions) GetDisableCheckCrc() bool {
	if m != nil {
		return m.DisableCheckCrc
	}
	return false
}

type FaceMatchRequest struct {
	FaceFeature      *FaceFeature      `protobuf:"bytes,1,opt,name=face_feature,json=faceFeature,proto3" json:"face_feature,omitempty"`
	FaceMatchOptions *FaceMatchOptions `protobuf:"bytes,2,opt,name=face_match_options,json=faceMatchOptions,proto3" json:"face_match_options,omitempty"`
	// If identity ID is included, then this is a 1:1 authorization request,
	// otherwise, it is a 1:N recognition request.
	IdentityId string `protobuf:"bytes,3,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	// business information of client requestor
	Requestor            *Requestor `protobuf:"bytes,100,opt,name=requestor,proto3" json:"requestor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FaceMatchRequest) Reset()         { *m = FaceMatchRequest{} }
func (m *FaceMatchRequest) String() string { return proto.CompactTextString(m) }
func (*FaceMatchRequest) ProtoMessage()    {}
func (*FaceMatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{14}
}

func (m *FaceMatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaceMatchRequest.Unmarshal(m, b)
}
func (m *FaceMatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaceMatchRequest.Marshal(b, m, deterministic)
}
func (m *FaceMatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceMatchRequest.Merge(m, src)
}
func (m *FaceMatchRequest) XXX_Size() int {
	return xxx_messageInfo_FaceMatchRequest.Size(m)
}
func (m *FaceMatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceMatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FaceMatchRequest proto.InternalMessageInfo

func (m *FaceMatchRequest) GetFaceFeature() *FaceFeature {
	if m != nil {
		return m.FaceFeature
	}
	return nil
}

func (m *FaceMatchRequest) GetFaceMatchOptions() *FaceMatchOptions {
	if m != nil {
		return m.FaceMatchOptions
	}
	return nil
}

func (m *FaceMatchRequest) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *FaceMatchRequest) GetRequestor() *Requestor {
	if m != nil {
		return m.Requestor
	}
	return nil
}

type MatchedIdentity struct {
	// The identity id of of the matched person.
	IdentityId string `protobuf:"bytes,1,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	// The name of the matched person.
	IdentityName string `protobuf:"bytes,4,opt,name=identity_name,json=identityName,proto3" json:"identity_name,omitempty"`
	// The match score measures the closeness to the matched feature. Its
	// value is between 0 to 100, with 100 to be the exact match.
	MatchScore float64 `protobuf:"fixed64,2,opt,name=match_score,json=matchScore,proto3" json:"match_score,omitempty"`
	// The feature id of the person that is matched to.
	FeatureId            string   `protobuf:"bytes,3,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchedIdentity) Reset()         { *m = MatchedIdentity{} }
func (m *MatchedIdentity) String() string { return proto.CompactTextString(m) }
func (*MatchedIdentity) ProtoMessage()    {}
func (*MatchedIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{15}
}

func (m *MatchedIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchedIdentity.Unmarshal(m, b)
}
func (m *MatchedIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchedIdentity.Marshal(b, m, deterministic)
}
func (m *MatchedIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchedIdentity.Merge(m, src)
}
func (m *MatchedIdentity) XXX_Size() int {
	return xxx_messageInfo_MatchedIdentity.Size(m)
}
func (m *MatchedIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchedIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_MatchedIdentity proto.InternalMessageInfo

func (m *MatchedIdentity) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *MatchedIdentity) GetIdentityName() string {
	if m != nil {
		return m.IdentityName
	}
	return ""
}

func (m *MatchedIdentity) GetMatchScore() float64 {
	if m != nil {
		return m.MatchScore
	}
	return 0
}

func (m *MatchedIdentity) GetFeatureId() string {
	if m != nil {
		return m.FeatureId
	}
	return ""
}

// Used for 1:1 match request
type FeatureMatchScoreRequest struct {
	// The first feature to be matched
	FaceFeature_1 *FaceFeature `protobuf:"bytes,1,opt,name=face_feature_1,json=faceFeature1,proto3" json:"face_feature_1,omitempty"`
	// The second feature to be matched
	FaceFeature_2 *FaceFeature `protobuf:"bytes,2,opt,name=face_feature_2,json=faceFeature2,proto3" json:"face_feature_2,omitempty"`
	// business information of client requestor
	Requestor            *Requestor `protobuf:"bytes,100,opt,name=requestor,proto3" json:"requestor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FeatureMatchScoreRequest) Reset()         { *m = FeatureMatchScoreRequest{} }
func (m *FeatureMatchScoreRequest) String() string { return proto.CompactTextString(m) }
func (*FeatureMatchScoreRequest) ProtoMessage()    {}
func (*FeatureMatchScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{16}
}

func (m *FeatureMatchScoreRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureMatchScoreRequest.Unmarshal(m, b)
}
func (m *FeatureMatchScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureMatchScoreRequest.Marshal(b, m, deterministic)
}
func (m *FeatureMatchScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureMatchScoreRequest.Merge(m, src)
}
func (m *FeatureMatchScoreRequest) XXX_Size() int {
	return xxx_messageInfo_FeatureMatchScoreRequest.Size(m)
}
func (m *FeatureMatchScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureMatchScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureMatchScoreRequest proto.InternalMessageInfo

func (m *FeatureMatchScoreRequest) GetFaceFeature_1() *FaceFeature {
	if m != nil {
		return m.FaceFeature_1
	}
	return nil
}

func (m *FeatureMatchScoreRequest) GetFaceFeature_2() *FaceFeature {
	if m != nil {
		return m.FaceFeature_2
	}
	return nil
}

func (m *FeatureMatchScoreRequest) GetRequestor() *Requestor {
	if m != nil {
		return m.Requestor
	}
	return nil
}

// The match result of 1:1 match
type FeatureMatchScoreResult struct {
	// The match score measures the closeness of two features. Its
	// value is between 0 to 100, with 100 to be the exact match.
	MatchScore           float64  `protobuf:"fixed64,1,opt,name=match_score,json=matchScore,proto3" json:"match_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureMatchScoreResult) Reset()         { *m = FeatureMatchScoreResult{} }
func (m *FeatureMatchScoreResult) String() string { return proto.CompactTextString(m) }
func (*FeatureMatchScoreResult) ProtoMessage()    {}
func (*FeatureMatchScoreResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{17}
}

func (m *FeatureMatchScoreResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureMatchScoreResult.Unmarshal(m, b)
}
func (m *FeatureMatchScoreResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureMatchScoreResult.Marshal(b, m, deterministic)
}
func (m *FeatureMatchScoreResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureMatchScoreResult.Merge(m, src)
}
func (m *FeatureMatchScoreResult) XXX_Size() int {
	return xxx_messageInfo_FeatureMatchScoreResult.Size(m)
}
func (m *FeatureMatchScoreResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureMatchScoreResult.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureMatchScoreResult proto.InternalMessageInfo

func (m *FeatureMatchScoreResult) GetMatchScore() float64 {
	if m != nil {
		return m.MatchScore
	}
	return 0
}

type MatchedIdentities struct {
	MatchedIdentity      []*MatchedIdentity `protobuf:"bytes,1,rep,name=matched_identity,json=matchedIdentity,proto3" json:"matched_identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MatchedIdentities) Reset()         { *m = MatchedIdentities{} }
func (m *MatchedIdentities) String() string { return proto.CompactTextString(m) }
func (*MatchedIdentities) ProtoMessage()    {}
func (*MatchedIdentities) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{18}
}

func (m *MatchedIdentities) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchedIdentities.Unmarshal(m, b)
}
func (m *MatchedIdentities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchedIdentities.Marshal(b, m, deterministic)
}
func (m *MatchedIdentities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchedIdentities.Merge(m, src)
}
func (m *MatchedIdentities) XXX_Size() int {
	return xxx_messageInfo_MatchedIdentities.Size(m)
}
func (m *MatchedIdentities) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchedIdentities.DiscardUnknown(m)
}

var xxx_messageInfo_MatchedIdentities proto.InternalMessageInfo

func (m *MatchedIdentities) GetMatchedIdentity() []*MatchedIdentity {
	if m != nil {
		return m.MatchedIdentity
	}
	return nil
}

type FeatureLibrary struct {
	LibraryName          string   `protobuf:"bytes,1,opt,name=library_name,json=libraryName,proto3" json:"library_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureLibrary) Reset()         { *m = FeatureLibrary{} }
func (m *FeatureLibrary) String() string { return proto.CompactTextString(m) }
func (*FeatureLibrary) ProtoMessage()    {}
func (*FeatureLibrary) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{19}
}

func (m *FeatureLibrary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureLibrary.Unmarshal(m, b)
}
func (m *FeatureLibrary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureLibrary.Marshal(b, m, deterministic)
}
func (m *FeatureLibrary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureLibrary.Merge(m, src)
}
func (m *FeatureLibrary) XXX_Size() int {
	return xxx_messageInfo_FeatureLibrary.Size(m)
}
func (m *FeatureLibrary) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureLibrary.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureLibrary proto.InternalMessageInfo

func (m *FeatureLibrary) GetLibraryName() string {
	if m != nil {
		return m.LibraryName
	}
	return ""
}

type FeatureLibraries struct {
	FeatureLibrary       []*FeatureLibrary `protobuf:"bytes,1,rep,name=feature_library,json=featureLibrary,proto3" json:"feature_library,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FeatureLibraries) Reset()         { *m = FeatureLibraries{} }
func (m *FeatureLibraries) String() string { return proto.CompactTextString(m) }
func (*FeatureLibraries) ProtoMessage()    {}
func (*FeatureLibraries) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{20}
}

func (m *FeatureLibraries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureLibraries.Unmarshal(m, b)
}
func (m *FeatureLibraries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureLibraries.Marshal(b, m, deterministic)
}
func (m *FeatureLibraries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureLibraries.Merge(m, src)
}
func (m *FeatureLibraries) XXX_Size() int {
	return xxx_messageInfo_FeatureLibraries.Size(m)
}
func (m *FeatureLibraries) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureLibraries.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureLibraries proto.InternalMessageInfo

func (m *FeatureLibraries) GetFeatureLibrary() []*FeatureLibrary {
	if m != nil {
		return m.FeatureLibrary
	}
	return nil
}

type FeatureLibraryRequest struct {
	FeatureLibrary *FeatureLibrary `protobuf:"bytes,1,opt,name=feature_library,json=featureLibrary,proto3" json:"feature_library,omitempty"`
	// business information of client requestor
	Requestor            *Requestor `protobuf:"bytes,100,opt,name=requestor,proto3" json:"requestor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FeatureLibraryRequest) Reset()         { *m = FeatureLibraryRequest{} }
func (m *FeatureLibraryRequest) String() string { return proto.CompactTextString(m) }
func (*FeatureLibraryRequest) ProtoMessage()    {}
func (*FeatureLibraryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{21}
}

func (m *FeatureLibraryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureLibraryRequest.Unmarshal(m, b)
}
func (m *FeatureLibraryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureLibraryRequest.Marshal(b, m, deterministic)
}
func (m *FeatureLibraryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureLibraryRequest.Merge(m, src)
}
func (m *FeatureLibraryRequest) XXX_Size() int {
	return xxx_messageInfo_FeatureLibraryRequest.Size(m)
}
func (m *FeatureLibraryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureLibraryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureLibraryRequest proto.InternalMessageInfo

func (m *FeatureLibraryRequest) GetFeatureLibrary() *FeatureLibrary {
	if m != nil {
		return m.FeatureLibrary
	}
	return nil
}

func (m *FeatureLibraryRequest) GetRequestor() *Requestor {
	if m != nil {
		return m.Requestor
	}
	return nil
}

// FeatureLibraryUpdates return statistics of feature update results.
type FeatureLibraryUpdates struct {
	// The number of features updated (not added) in the match server
	NumUpdated int32 `protobuf:"varint,1,opt,name=num_updated,json=numUpdated,proto3" json:"num_updated,omitempty"`
	// The number of feature added into the match server
	NumAdded int32 `protobuf:"varint,2,opt,name=num_added,json=numAdded,proto3" json:"num_added,omitempty"`
	// The number of features deleted from the match server
	NumDeleted int32 `protobuf:"varint,3,opt,name=num_deleted,json=numDeleted,proto3" json:"num_deleted,omitempty"`
	// The number of request records not updated due to various reaons, for
	// example expired.
	NumFailed int32 `protobuf:"varint,4,opt,name=num_failed,json=numFailed,proto3" json:"num_failed,omitempty"`
	// After update, the total number of features in the match server.
	NumFeatures int32 `protobuf:"varint,5,opt,name=num_features,json=numFeatures,proto3" json:"num_features,omitempty"`
	// After update, return the latest update time of all features
	// in the match server, represented as the milliseconds from the epoch.
	LatestUpdateTime     int64    `protobuf:"varint,6,opt,name=latest_update_time,json=latestUpdateTime,proto3" json:"latest_update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureLibraryUpdates) Reset()         { *m = FeatureLibraryUpdates{} }
func (m *FeatureLibraryUpdates) String() string { return proto.CompactTextString(m) }
func (*FeatureLibraryUpdates) ProtoMessage()    {}
func (*FeatureLibraryUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{22}
}

func (m *FeatureLibraryUpdates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureLibraryUpdates.Unmarshal(m, b)
}
func (m *FeatureLibraryUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureLibraryUpdates.Marshal(b, m, deterministic)
}
func (m *FeatureLibraryUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureLibraryUpdates.Merge(m, src)
}
func (m *FeatureLibraryUpdates) XXX_Size() int {
	return xxx_messageInfo_FeatureLibraryUpdates.Size(m)
}
func (m *FeatureLibraryUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureLibraryUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureLibraryUpdates proto.InternalMessageInfo

func (m *FeatureLibraryUpdates) GetNumUpdated() int32 {
	if m != nil {
		return m.NumUpdated
	}
	return 0
}

func (m *FeatureLibraryUpdates) GetNumAdded() int32 {
	if m != nil {
		return m.NumAdded
	}
	return 0
}

func (m *FeatureLibraryUpdates) GetNumDeleted() int32 {
	if m != nil {
		return m.NumDeleted
	}
	return 0
}

func (m *FeatureLibraryUpdates) GetNumFailed() int32 {
	if m != nil {
		return m.NumFailed
	}
	return 0
}

func (m *FeatureLibraryUpdates) GetNumFeatures() int32 {
	if m != nil {
		return m.NumFeatures
	}
	return 0
}

func (m *FeatureLibraryUpdates) GetLatestUpdateTime() int64 {
	if m != nil {
		return m.LatestUpdateTime
	}
	return 0
}

// This is a collection of identity id's with associated feature library name.
type IdentityRequest struct {
	IdentityId     []string        `protobuf:"bytes,1,rep,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	FeatureLibrary *FeatureLibrary `protobuf:"bytes,2,opt,name=feature_library,json=featureLibrary,proto3" json:"feature_library,omitempty"`
	// business information of client requestor
	Requestor            *Requestor `protobuf:"bytes,100,opt,name=requestor,proto3" json:"requestor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *IdentityRequest) Reset()         { *m = IdentityRequest{} }
func (m *IdentityRequest) String() string { return proto.CompactTextString(m) }
func (*IdentityRequest) ProtoMessage()    {}
func (*IdentityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{23}
}

func (m *IdentityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentityRequest.Unmarshal(m, b)
}
func (m *IdentityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentityRequest.Marshal(b, m, deterministic)
}
func (m *IdentityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityRequest.Merge(m, src)
}
func (m *IdentityRequest) XXX_Size() int {
	return xxx_messageInfo_IdentityRequest.Size(m)
}
func (m *IdentityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityRequest proto.InternalMessageInfo

func (m *IdentityRequest) GetIdentityId() []string {
	if m != nil {
		return m.IdentityId
	}
	return nil
}

func (m *IdentityRequest) GetFeatureLibrary() *FeatureLibrary {
	if m != nil {
		return m.FeatureLibrary
	}
	return nil
}

func (m *IdentityRequest) GetRequestor() *Requestor {
	if m != nil {
		return m.Requestor
	}
	return nil
}

//
type DelFeaturesRequest struct {
	FeatureId      []string        `protobuf:"bytes,1,rep,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	IdentityId     string          `protobuf:"bytes,2,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	FeatureLibrary *FeatureLibrary `protobuf:"bytes,3,opt,name=feature_library,json=featureLibrary,proto3" json:"feature_library,omitempty"`
	// business information of client requestor
	Requestor            *Requestor `protobuf:"bytes,100,opt,name=requestor,proto3" json:"requestor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DelFeaturesRequest) Reset()         { *m = DelFeaturesRequest{} }
func (m *DelFeaturesRequest) String() string { return proto.CompactTextString(m) }
func (*DelFeaturesRequest) ProtoMessage()    {}
func (*DelFeaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{24}
}

func (m *DelFeaturesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelFeaturesRequest.Unmarshal(m, b)
}
func (m *DelFeaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelFeaturesRequest.Marshal(b, m, deterministic)
}
func (m *DelFeaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelFeaturesRequest.Merge(m, src)
}
func (m *DelFeaturesRequest) XXX_Size() int {
	return xxx_messageInfo_DelFeaturesRequest.Size(m)
}
func (m *DelFeaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelFeaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelFeaturesRequest proto.InternalMessageInfo

func (m *DelFeaturesRequest) GetFeatureId() []string {
	if m != nil {
		return m.FeatureId
	}
	return nil
}

func (m *DelFeaturesRequest) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *DelFeaturesRequest) GetFeatureLibrary() *FeatureLibrary {
	if m != nil {
		return m.FeatureLibrary
	}
	return nil
}

func (m *DelFeaturesRequest) GetRequestor() *Requestor {
	if m != nil {
		return m.Requestor
	}
	return nil
}

type Count struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Count) Reset()         { *m = Count{} }
func (m *Count) String() string { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()    {}
func (*Count) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{25}
}

func (m *Count) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Count.Unmarshal(m, b)
}
func (m *Count) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Count.Marshal(b, m, deterministic)
}
func (m *Count) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count.Merge(m, src)
}
func (m *Count) XXX_Size() int {
	return xxx_messageInfo_Count.Size(m)
}
func (m *Count) XXX_DiscardUnknown() {
	xxx_messageInfo_Count.DiscardUnknown(m)
}

var xxx_messageInfo_Count proto.InternalMessageInfo

func (m *Count) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// The information of the entity that initiates gRPC requests
type Requestor struct {
	CompanyId            string   `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ApplicationId        string   `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	DeviceId             string   `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	AccessCode           string   `protobuf:"bytes,4,opt,name=access_code,json=accessCode,proto3" json:"access_code,omitempty"`
	UserId               string   `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Password             string   `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	RequestSequence      string   `protobuf:"bytes,7,opt,name=request_sequence,json=requestSequence,proto3" json:"request_sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Requestor) Reset()         { *m = Requestor{} }
func (m *Requestor) String() string { return proto.CompactTextString(m) }
func (*Requestor) ProtoMessage()    {}
func (*Requestor) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{26}
}

func (m *Requestor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Requestor.Unmarshal(m, b)
}
func (m *Requestor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Requestor.Marshal(b, m, deterministic)
}
func (m *Requestor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Requestor.Merge(m, src)
}
func (m *Requestor) XXX_Size() int {
	return xxx_messageInfo_Requestor.Size(m)
}
func (m *Requestor) XXX_DiscardUnknown() {
	xxx_messageInfo_Requestor.DiscardUnknown(m)
}

var xxx_messageInfo_Requestor proto.InternalMessageInfo

func (m *Requestor) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *Requestor) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *Requestor) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *Requestor) GetAccessCode() string {
	if m != nil {
		return m.AccessCode
	}
	return ""
}

func (m *Requestor) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Requestor) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Requestor) GetRequestSequence() string {
	if m != nil {
		return m.RequestSequence
	}
	return ""
}

func init() {
	proto.RegisterEnum("face_service.ImageParam_Channel", ImageParam_Channel_name, ImageParam_Channel_value)
	proto.RegisterEnum("face_service.FaceParam_Landmark_Type", FaceParam_Landmark_Type_name, FaceParam_Landmark_Type_value)
	proto.RegisterType((*Empty)(nil), "face_service.Empty")
	proto.RegisterType((*EmptyRequest)(nil), "face_service.EmptyRequest")
	proto.RegisterType((*FaceFeature)(nil), "face_service.FaceFeature")
	proto.RegisterType((*ImageParam)(nil), "face_service.ImageParam")
	proto.RegisterType((*Image)(nil), "face_service.Image")
	proto.RegisterType((*CroppingBox)(nil), "face_service.CroppingBox")
	proto.RegisterType((*FaceParam)(nil), "face_service.FaceParam")
	proto.RegisterType((*FaceParam_Landmark)(nil), "face_service.FaceParam.Landmark")
	proto.RegisterType((*FaceParams)(nil), "face_service.FaceParams")
	proto.RegisterType((*Face)(nil), "face_service.Face")
	proto.RegisterType((*Faces)(nil), "face_service.Faces")
	proto.RegisterType((*FaceRequest)(nil), "face_service.FaceRequest")
	proto.RegisterType((*FaceReply)(nil), "face_service.FaceReply")
	proto.RegisterType((*FeatureUpdate)(nil), "face_service.FeatureUpdate")
	proto.RegisterType((*FaceMatchOptions)(nil), "face_service.FaceMatchOptions")
	proto.RegisterType((*FaceMatchRequest)(nil), "face_service.FaceMatchRequest")
	proto.RegisterType((*MatchedIdentity)(nil), "face_service.MatchedIdentity")
	proto.RegisterType((*FeatureMatchScoreRequest)(nil), "face_service.FeatureMatchScoreRequest")
	proto.RegisterType((*FeatureMatchScoreResult)(nil), "face_service.FeatureMatchScoreResult")
	proto.RegisterType((*MatchedIdentities)(nil), "face_service.MatchedIdentities")
	proto.RegisterType((*FeatureLibrary)(nil), "face_service.FeatureLibrary")
	proto.RegisterType((*FeatureLibraries)(nil), "face_service.FeatureLibraries")
	proto.RegisterType((*FeatureLibraryRequest)(nil), "face_service.FeatureLibraryRequest")
	proto.RegisterType((*FeatureLibraryUpdates)(nil), "face_service.FeatureLibraryUpdates")
	proto.RegisterType((*IdentityRequest)(nil), "face_service.IdentityRequest")
	proto.RegisterType((*DelFeaturesRequest)(nil), "face_service.DelFeaturesRequest")
	proto.RegisterType((*Count)(nil), "face_service.Count")
	proto.RegisterType((*Requestor)(nil), "face_service.Requestor")
}

func init() { proto.RegisterFile("face.proto", fileDescriptor_543a5193e84d47c5) }

var fileDescriptor_543a5193e84d47c5 = []byte{
	// 2003 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4b, 0x6f, 0xe3, 0xd6,
	0x15, 0x16, 0xf5, 0xd6, 0xd1, 0xc3, 0xf4, 0xf5, 0x24, 0x56, 0x3c, 0xf1, 0x8c, 0xc3, 0xc0, 0xa9,
	0x53, 0xb4, 0x46, 0xa3, 0xa0, 0x05, 0x26, 0x48, 0x5b, 0x8c, 0x65, 0xd9, 0x23, 0xc0, 0x0f, 0xf5,
	0x4a, 0xc6, 0x74, 0x0a, 0x14, 0x2c, 0x4d, 0x5e, 0xd9, 0x44, 0xf8, 0x0a, 0x49, 0xcd, 0x0c, 0xb3,
	0xe9, 0xa6, 0x9b, 0x2c, 0xba, 0x6b, 0xd1, 0x55, 0x37, 0xdd, 0x17, 0xc8, 0x6f, 0x48, 0xff, 0x41,
	0xfb, 0x1f, 0xba, 0x6d, 0x57, 0x5d, 0x17, 0xf7, 0x41, 0x8a, 0xa4, 0x38, 0xb6, 0xc7, 0x2d, 0xb2,
	0xe3, 0x3d, 0xe7, 0xbb, 0x87, 0xe7, 0x75, 0xbf, 0x73, 0x29, 0x01, 0xcc, 0x35, 0x9d, 0xec, 0x7b,
	0xbe, 0x1b, 0xba, 0xa8, 0x43, 0x9f, 0xd5, 0x80, 0xf8, 0x2f, 0x4d, 0x9d, 0x28, 0x0d, 0xa8, 0x8d,
	0x6c, 0x2f, 0x8c, 0x94, 0x11, 0x74, 0xd8, 0x03, 0x26, 0x5f, 0x2e, 0x48, 0x10, 0xa2, 0x1f, 0x43,
	0xcb, 0xe7, 0x8f, 0xae, 0xdf, 0x37, 0x76, 0xa4, 0xbd, 0xf6, 0x60, 0x73, 0x3f, 0xbd, 0x75, 0x1f,
	0xc7, 0x6a, 0xbc, 0x44, 0x2a, 0xbf, 0x85, 0xf6, 0x91, 0xa6, 0x93, 0x23, 0xa2, 0x85, 0x0b, 0x9f,
	0xa0, 0x07, 0x50, 0x7b, 0xa9, 0x59, 0x0b, 0xd2, 0x97, 0x76, 0xa4, 0xbd, 0x0e, 0xe6, 0x0b, 0xd4,
	0x87, 0xc6, 0x4b, 0xe2, 0x07, 0xa6, 0xeb, 0xf4, 0xcb, 0x3b, 0xd2, 0x5e, 0x0b, 0xc7, 0x4b, 0xf4,
	0x18, 0xda, 0xe4, 0xb5, 0x67, 0xfa, 0x44, 0x0d, 0x4d, 0x9b, 0xf4, 0x2b, 0x3b, 0xd2, 0x5e, 0x05,
	0x03, 0x17, 0xcd, 0x4c, 0x9b, 0x50, 0xc0, 0xc2, 0x33, 0xb4, 0x50, 0x00, 0xaa, 0x1c, 0xc0, 0x45,
	0x14, 0xa0, 0xfc, 0x41, 0x02, 0x18, 0xdb, 0xda, 0x15, 0x99, 0x68, 0xbe, 0x66, 0x53, 0x07, 0x5e,
	0x99, 0x46, 0x78, 0xcd, 0x1c, 0xa8, 0x61, 0xbe, 0x40, 0xef, 0x42, 0xfd, 0x9a, 0x98, 0x57, 0xd7,
	0x21, 0x7b, 0x7f, 0x0d, 0x8b, 0x15, 0xfa, 0x0c, 0x1a, 0xfa, 0xb5, 0xe6, 0x38, 0xc4, 0x62, 0xaf,
	0xee, 0x0d, 0x76, 0xb2, 0x21, 0x2f, 0x0d, 0xef, 0x0f, 0x39, 0x0e, 0xc7, 0x1b, 0x94, 0xf7, 0xa1,
	0x21, 0x64, 0xa8, 0x01, 0x15, 0x7c, 0x7c, 0x20, 0x97, 0x50, 0x13, 0xaa, 0xc7, 0xf8, 0xe9, 0x0b,
	0x59, 0x52, 0xfe, 0x2a, 0x41, 0x8d, 0xed, 0xa6, 0x11, 0x98, 0xf4, 0x41, 0xbd, 0x8c, 0x42, 0x12,
	0x88, 0xc4, 0x00, 0x13, 0x1d, 0x50, 0x09, 0x7a, 0x12, 0x03, 0x3c, 0xfa, 0x22, 0xe6, 0x61, 0x7b,
	0xd0, 0x7f, 0x93, 0x23, 0x62, 0x2b, 0x8f, 0xf6, 0x03, 0xe8, 0xf0, 0xad, 0x81, 0xbb, 0xf0, 0x75,
	0x9e, 0xbf, 0x16, 0xe6, 0xe6, 0xa6, 0x4c, 0x84, 0x76, 0xa1, 0x27, 0x20, 0xb4, 0x66, 0x8e, 0x1e,
	0xe7, 0xb0, 0xcb, 0x41, 0x42, 0xa8, 0x7c, 0x2b, 0x41, 0x7b, 0xe8, 0xbb, 0x9e, 0x67, 0x3a, 0x57,
	0x07, 0xee, 0x6b, 0xd4, 0x01, 0xe9, 0xb5, 0xc8, 0xa1, 0xc4, 0x56, 0x91, 0x48, 0x9d, 0x14, 0x2d,
	0x73, 0x5c, 0x29, 0xce, 0x71, 0x35, 0x93, 0xe3, 0x55, 0x07, 0x6a, 0x05, 0x0e, 0xd0, 0x34, 0xcd,
	0x7d, 0xcd, 0x26, 0x2a, 0x37, 0x5d, 0x67, 0x36, 0x80, 0x89, 0x9e, 0x33, 0xfb, 0x1f, 0x40, 0x87,
	0x03, 0xc4, 0x5b, 0x1a, 0x0c, 0xc1, 0x37, 0x3d, 0x63, 0x22, 0xe5, 0xdf, 0x35, 0x68, 0xd1, 0x6e,
	0xe4, 0xc9, 0xf9, 0x1c, 0x3a, 0xba, 0x88, 0x48, 0xbd, 0x74, 0x79, 0x34, 0xed, 0xc1, 0x7b, 0xd9,
	0xc4, 0xa6, 0x62, 0xc6, 0x6d, 0x3d, 0x95, 0x80, 0xcf, 0xa1, 0x69, 0x69, 0x8e, 0x61, 0x6b, 0xfe,
	0x17, 0xfd, 0xca, 0x4e, 0x65, 0xaf, 0x9d, 0xef, 0x8d, 0xe4, 0x45, 0xfb, 0x27, 0x02, 0x87, 0x93,
	0x1d, 0x68, 0x1b, 0xc0, 0x77, 0x2d, 0x4b, 0xd5, 0x9c, 0x2b, 0x8b, 0x67, 0xbc, 0x8c, 0x5b, 0x54,
	0xf2, 0x94, 0x0a, 0xd0, 0x43, 0x68, 0x45, 0xda, 0x2b, 0xa1, 0xad, 0x31, 0x6d, 0x33, 0xd2, 0x5e,
	0x71, 0xe5, 0x36, 0x40, 0x68, 0x5a, 0xa1, 0xd0, 0xd6, 0xf9, 0x5e, 0x2a, 0xe1, 0xea, 0xef, 0xc1,
	0x9a, 0x41, 0x42, 0xa2, 0x87, 0xa6, 0xeb, 0xa8, 0x81, 0xee, 0xfa, 0x84, 0xa5, 0xa2, 0x8c, 0x7b,
	0x89, 0x78, 0x4a, 0xa5, 0xe8, 0x07, 0x80, 0x98, 0xc3, 0x5f, 0x2e, 0x34, 0xcb, 0x0c, 0x23, 0x81,
	0x6d, 0x32, 0xac, 0x4c, 0x35, 0xbf, 0xe0, 0x0a, 0x8e, 0xde, 0x85, 0x9e, 0x65, 0xbe, 0x24, 0x0e,
	0x09, 0x02, 0x81, 0x6c, 0x31, 0x64, 0x37, 0x96, 0x32, 0xd8, 0xd6, 0xef, 0x2b, 0xd0, 0x8c, 0xe3,
	0xbd, 0xb1, 0x49, 0x9e, 0x40, 0x35, 0x8c, 0x3c, 0x22, 0xce, 0xd5, 0xee, 0x6d, 0xb9, 0xdb, 0x9f,
	0x45, 0x1e, 0xc1, 0x6c, 0x0b, 0x7a, 0x04, 0xa0, 0xbb, 0xce, 0xdc, 0x34, 0x92, 0x76, 0x2d, 0xe3,
	0x94, 0x44, 0xf9, 0xba, 0x0c, 0x55, 0x0a, 0x47, 0x1d, 0x68, 0x9e, 0x8c, 0x8e, 0x66, 0xea, 0xe8,
	0xc5, 0x48, 0x2e, 0xa1, 0x2e, 0xb4, 0xf0, 0xf8, 0xf8, 0x19, 0x5f, 0x4a, 0xa8, 0x0f, 0x0f, 0x98,
	0xf2, 0xfc, 0x48, 0x8d, 0x41, 0x07, 0xf8, 0xfc, 0xb9, 0x5c, 0x46, 0xef, 0xc1, 0x3b, 0x1c, 0x98,
	0x57, 0x55, 0xa8, 0x2a, 0xde, 0x94, 0xd8, 0x62, 0xaa, 0x2a, 0xda, 0x82, 0x77, 0x93, 0x5d, 0x59,
	0x5d, 0x8d, 0x6e, 0x3b, 0x1d, 0x1f, 0x4e, 0xce, 0xc7, 0x67, 0x33, 0xf5, 0x60, 0x34, 0x7b, 0x3e,
	0x1a, 0x9d, 0x51, 0xed, 0x54, 0xae, 0x53, 0x1f, 0xcf, 0xce, 0xa7, 0x23, 0x75, 0x36, 0x9e, 0xc8,
	0x0d, 0xea, 0xe3, 0xc5, 0x64, 0x32, 0xc2, 0xea, 0xc9, 0x78, 0x22, 0x37, 0xe9, 0xf2, 0xe4, 0xfc,
	0xb9, 0x58, 0xb6, 0x50, 0x0f, 0xe0, 0xf4, 0xfc, 0x62, 0xf6, 0x8c, 0x79, 0x25, 0x03, 0x5a, 0x83,
	0x36, 0x5f, 0xb3, 0xf7, 0xc9, 0x6d, 0x24, 0x43, 0x87, 0x0b, 0x86, 0xa3, 0xb3, 0xd9, 0x08, 0xcb,
	0x1d, 0xe5, 0x10, 0x20, 0x49, 0x66, 0x80, 0x7e, 0xc2, 0x99, 0x5f, 0x30, 0x89, 0xc4, 0xda, 0x76,
	0xf3, 0x0d, 0xa9, 0xc7, 0xad, 0x79, 0xfc, 0xa8, 0x7c, 0x5b, 0x86, 0x2a, 0x55, 0xd0, 0x33, 0xc3,
	0xd0, 0x73, 0xce, 0xe7, 0xc5, 0x67, 0x26, 0x45, 0xf8, 0xb8, 0x3d, 0x4f, 0xb1, 0x7f, 0xf6, 0xf5,
	0xe5, 0xa2, 0x21, 0x52, 0xf4, 0x7a, 0xf4, 0x31, 0xd4, 0x18, 0x19, 0xb0, 0x66, 0x69, 0x0f, 0x36,
	0x0a, 0xb8, 0x0f, 0x73, 0x04, 0x3a, 0x03, 0x64, 0x6b, 0xa1, 0x7e, 0x4d, 0x0c, 0x95, 0x76, 0x43,
	0x68, 0x86, 0x26, 0x09, 0x58, 0x8f, 0xb4, 0x07, 0x8f, 0xb3, 0xfb, 0x4e, 0x39, 0x6e, 0x9c, 0xc0,
	0xf0, 0xba, 0x9d, 0x17, 0xa1, 0x3d, 0x90, 0x39, 0x3b, 0xd1, 0xf1, 0xa2, 0x06, 0xa1, 0x66, 0x7b,
	0x82, 0x9f, 0x38, 0x6b, 0xd1, 0x19, 0x33, 0xa5, 0x52, 0xc6, 0xe3, 0x81, 0x1a, 0x84, 0xbe, 0xe6,
	0x5c, 0x11, 0x9f, 0x9d, 0xcb, 0x26, 0x06, 0x33, 0x98, 0x0a, 0x89, 0x32, 0x87, 0x1a, 0x8d, 0x2e,
	0x40, 0x1f, 0x41, 0x95, 0x3a, 0x22, 0xf2, 0x8f, 0x56, 0x13, 0x80, 0x99, 0xfe, 0xbe, 0x23, 0xf7,
	0xcf, 0x15, 0x3e, 0x73, 0xe3, 0xc9, 0x9d, 0x64, 0x4f, 0xba, 0x35, 0x7b, 0x4f, 0xa0, 0xbd, 0x2c,
	0x50, 0x50, 0x3c, 0x6a, 0x96, 0xed, 0x84, 0x61, 0xbe, 0x6c, 0xad, 0x5d, 0xe8, 0x31, 0x58, 0x42,
	0x32, 0xac, 0x58, 0x4d, 0xdc, 0xa5, 0xd2, 0xc3, 0x58, 0x88, 0x7e, 0x08, 0x28, 0xa1, 0x91, 0x25,
	0xb4, 0xca, 0xa0, 0xeb, 0xb1, 0x26, 0x03, 0x17, 0xad, 0xa6, 0x92, 0xd7, 0xa1, 0xaf, 0x71, 0x78,
	0x8d, 0xc3, 0x85, 0x66, 0x94, 0x28, 0x32, 0xd6, 0xc3, 0x6b, 0x9f, 0x04, 0xd7, 0xae, 0x65, 0xb0,
	0x52, 0x48, 0x4b, 0xeb, 0xb3, 0x58, 0x81, 0x7e, 0x0a, 0x0f, 0xb3, 0x3e, 0xab, 0xb6, 0xe9, 0x98,
	0xf6, 0xc2, 0x56, 0x03, 0xf3, 0x2b, 0x22, 0x26, 0x48, 0x3f, 0x13, 0xc0, 0x29, 0x07, 0x4c, 0xcd,
	0xaf, 0xee, 0x5d, 0x9f, 0xdf, 0x49, 0x7c, 0x0a, 0x61, 0xe2, 0x59, 0x51, 0x3e, 0xe5, 0xd2, 0x5b,
	0xa4, 0x3c, 0x7f, 0x18, 0xcb, 0xac, 0x9f, 0xee, 0x78, 0x18, 0x95, 0x6f, 0xca, 0xd0, 0x15, 0xcf,
	0x17, 0xec, 0xba, 0xc4, 0x3a, 0x98, 0x77, 0x7e, 0xa4, 0x9a, 0x06, 0x73, 0xa5, 0x85, 0x21, 0x16,
	0x8d, 0x0d, 0xf4, 0x21, 0x74, 0x13, 0x80, 0xa3, 0xd9, 0x7c, 0x34, 0xb5, 0x70, 0x27, 0x16, 0x9e,
	0x69, 0x36, 0x29, 0xf0, 0xea, 0x6d, 0x28, 0x62, 0x1b, 0x20, 0x2e, 0xb8, 0x69, 0x88, 0xfb, 0x4a,
	0x4b, 0x48, 0xc6, 0x06, 0x1a, 0xc1, 0x5a, 0xac, 0xb6, 0xcc, 0x4b, 0x5f, 0xf3, 0x23, 0x71, 0xb6,
	0xdf, 0xcf, 0xd9, 0xe7, 0xa0, 0x13, 0x8e, 0xc1, 0xbd, 0x79, 0x66, 0x7d, 0xdf, 0xca, 0x7d, 0x5d,
	0x06, 0x99, 0x7a, 0xce, 0x98, 0xe3, 0xdc, 0xa3, 0xfd, 0x10, 0xd0, 0x79, 0xcb, 0x68, 0x23, 0xd5,
	0x70, 0x12, 0x6b, 0xb8, 0x1e, 0x13, 0x2f, 0xbb, 0x6d, 0x03, 0x6a, 0xa1, 0xeb, 0xa9, 0x8e, 0x98,
	0x81, 0xd5, 0xd0, 0xf5, 0xce, 0x8a, 0x02, 0xaa, 0xdc, 0x23, 0xa0, 0x6d, 0x00, 0x67, 0x61, 0xab,
	0x9e, 0x49, 0x74, 0x41, 0x77, 0x35, 0xdc, 0x72, 0x16, 0xf6, 0x84, 0x09, 0xe8, 0xe1, 0x64, 0xaa,
	0xec, 0x1d, 0xab, 0x86, 0xbb, 0x4c, 0x9a, 0xdc, 0xb1, 0xbe, 0x0f, 0xeb, 0x86, 0x19, 0x68, 0x97,
	0x16, 0x51, 0xf5, 0x6b, 0xa2, 0x7f, 0xa1, 0xea, 0xbe, 0x2e, 0x88, 0x6c, 0x4d, 0x28, 0x86, 0x54,
	0x3e, 0xf4, 0x75, 0xe5, 0x3f, 0x52, 0x2a, 0x17, 0x31, 0xd5, 0xfc, 0x6f, 0xe3, 0xe1, 0x44, 0x5c,
	0x48, 0x78, 0x3a, 0x5d, 0x9e, 0x5f, 0xd1, 0x3f, 0x8f, 0x56, 0x6d, 0xa4, 0xab, 0xc0, 0x2f, 0x2c,
	0x99, 0xba, 0xe4, 0xba, 0xb9, 0xb2, 0xd2, 0xcd, 0xf7, 0x6c, 0x82, 0x3f, 0x49, 0xb0, 0x96, 0x1d,
	0x1d, 0xd1, 0x3d, 0x4e, 0x4e, 0xb5, 0xe0, 0xe4, 0x3c, 0x86, 0x36, 0x0f, 0x9d, 0xdf, 0xaf, 0xca,
	0xac, 0x8b, 0x80, 0x89, 0xf8, 0x1d, 0xec, 0xe6, 0xc3, 0xa1, 0xfc, 0x43, 0x82, 0xbe, 0xc8, 0xe5,
	0x69, 0xb2, 0x29, 0x2e, 0xcd, 0xcf, 0x05, 0x3f, 0xc7, 0x06, 0x3e, 0xb9, 0xbd, 0x38, 0x9d, 0x54,
	0x71, 0x3e, 0x59, 0x31, 0x30, 0xb8, 0xfd, 0x64, 0xa7, 0x0d, 0x0c, 0xee, 0x9b, 0xef, 0xcf, 0x60,
	0xb3, 0x20, 0xa8, 0x60, 0x61, 0x85, 0xf9, 0x84, 0x49, 0xf9, 0x84, 0x29, 0xbf, 0x86, 0xf5, 0x95,
	0x29, 0x8f, 0x9e, 0x81, 0x9c, 0xbb, 0x22, 0x44, 0x62, 0x14, 0x6f, 0xdf, 0x74, 0x41, 0x88, 0xf0,
	0x5a, 0xf6, 0x7a, 0x10, 0x29, 0x9f, 0x42, 0x2f, 0x7b, 0x2e, 0xe9, 0x47, 0x88, 0x38, 0xc6, 0xbc,
	0xcc, 0xbc, 0x13, 0xda, 0x42, 0x46, 0xab, 0xac, 0xbc, 0x00, 0x39, 0xb3, 0x89, 0xba, 0x54, 0xc0,
	0x02, 0xdc, 0xa3, 0xb7, 0x62, 0x01, 0xe5, 0x8f, 0x12, 0xbc, 0x93, 0x83, 0x88, 0xea, 0x17, 0xbe,
	0xe0, 0x3b, 0xe3, 0xcd, 0x7f, 0xae, 0xf8, 0xc5, 0x27, 0x0e, 0x3b, 0xa4, 0x94, 0xb7, 0xf8, 0xf7,
	0xba, 0x21, 0xbe, 0x15, 0x28, 0x95, 0x71, 0x80, 0x41, 0xbf, 0x84, 0x28, 0x40, 0x33, 0x0c, 0x62,
	0x08, 0xe2, 0x6c, 0x3a, 0x0b, 0xfb, 0x29, 0x5d, 0xc7, 0xbb, 0x0d, 0x62, 0x11, 0xba, 0xbb, 0x92,
	0xec, 0x3e, 0xe4, 0x92, 0x98, 0x16, 0xe7, 0x9a, 0x69, 0x11, 0x23, 0x45, 0x8b, 0x47, 0x4c, 0x40,
	0xab, 0xc5, 0xd4, 0xdc, 0xb5, 0x40, 0x90, 0x22, 0xb5, 0x29, 0xbc, 0x0d, 0xe8, 0x47, 0x92, 0x45,
	0x3d, 0x0d, 0xd5, 0xf4, 0xcf, 0x0c, 0x75, 0x76, 0x03, 0x94, 0xb9, 0xe6, 0x62, 0xf9, 0x63, 0xc3,
	0x37, 0x12, 0xac, 0x25, 0xed, 0x22, 0x52, 0xbf, 0xc2, 0x0d, 0x95, 0x1c, 0x37, 0x14, 0xd4, 0xa6,
	0xfc, 0xdd, 0xd5, 0xe6, 0xef, 0x12, 0xa0, 0x43, 0x62, 0xc5, 0x01, 0xc7, 0x5e, 0x67, 0xa9, 0x86,
	0x3b, 0x9d, 0x9a, 0xc3, 0xb9, 0xa0, 0xca, 0x2b, 0x84, 0xf7, 0x7f, 0x9a, 0x6b, 0xf7, 0x0c, 0x6a,
	0x1b, 0x6a, 0x43, 0x77, 0xe1, 0x84, 0xe8, 0x01, 0xd4, 0x74, 0xfa, 0x10, 0xff, 0xdc, 0xc3, 0x16,
	0xca, 0xbf, 0x24, 0x68, 0x25, 0xfb, 0x68, 0xa8, 0xba, 0x6b, 0x7b, 0x9a, 0x93, 0xe2, 0xee, 0x96,
	0x90, 0x8c, 0x0d, 0x3a, 0x3b, 0x35, 0xcf, 0xb3, 0x4c, 0x5d, 0x63, 0x37, 0xc4, 0x24, 0xda, 0x6e,
	0x4a, 0x3a, 0x66, 0x8d, 0x6a, 0x10, 0xea, 0xd1, 0x92, 0x9a, 0x9b, 0x5c, 0xc0, 0xd3, 0xa5, 0xe9,
	0x3a, 0xbd, 0x95, 0xea, 0xae, 0x11, 0x93, 0x3f, 0x70, 0xd1, 0xd0, 0x35, 0x08, 0xda, 0x84, 0xc6,
	0x22, 0x20, 0x3e, 0xdd, 0xcb, 0xef, 0x54, 0x75, 0xba, 0x1c, 0x1b, 0x68, 0x0b, 0x9a, 0x9e, 0x16,
	0x04, 0xaf, 0x5c, 0x9f, 0xdf, 0x63, 0x5b, 0x38, 0x59, 0xa3, 0x8f, 0x41, 0x16, 0x21, 0x2f, 0xe7,
	0x7a, 0x83, 0x61, 0xd6, 0x84, 0x3c, 0x9e, 0xec, 0x83, 0xbf, 0xd5, 0x53, 0xd3, 0x7a, 0xca, 0x53,
	0x87, 0x30, 0x74, 0x8f, 0x49, 0x18, 0xf7, 0xeb, 0xf8, 0x10, 0xbd, 0x69, 0xc8, 0x8a, 0x5c, 0x6d,
	0xdd, 0xf6, 0x01, 0xa5, 0x94, 0xd0, 0x6f, 0x98, 0xcd, 0x25, 0x53, 0xa3, 0x8f, 0x0a, 0xeb, 0xbd,
	0x32, 0x9f, 0xb6, 0x76, 0x6f, 0xc5, 0x51, 0xca, 0x57, 0x4a, 0xe8, 0x97, 0x20, 0x9f, 0x98, 0x41,
	0x98, 0x9a, 0x33, 0x01, 0xfa, 0xf0, 0xc6, 0xa6, 0x12, 0x6f, 0x78, 0x58, 0x08, 0xe2, 0xa7, 0x57,
	0x29, 0xfd, 0x48, 0x42, 0xe7, 0xb0, 0xce, 0xba, 0xe6, 0xed, 0x4d, 0xe7, 0xbe, 0xa9, 0x98, 0x15,
	0xa5, 0x84, 0xa6, 0xb0, 0x71, 0x4c, 0xc2, 0x15, 0xb6, 0xdf, 0xca, 0xa2, 0xd3, 0x3f, 0xb3, 0x6e,
	0x3d, 0xba, 0xe1, 0x75, 0x3c, 0xc3, 0xbf, 0x02, 0xc4, 0x7d, 0xce, 0xb8, 0x79, 0x53, 0x70, 0x5b,
	0x37, 0xc6, 0x20, 0xa8, 0x58, 0x29, 0xed, 0x49, 0xd4, 0x36, 0xa7, 0xce, 0x8c, 0xed, 0xdc, 0x58,
	0xcc, 0x11, 0xdc, 0x1d, 0xad, 0xa3, 0x17, 0xd0, 0x13, 0xb6, 0x63, 0xbb, 0xb9, 0x1f, 0xcc, 0x56,
	0x59, 0xe8, 0xae, 0xa6, 0xe7, 0xd0, 0x5f, 0x71, 0x3b, 0x66, 0x90, 0x3b, 0xd5, 0xef, 0x6e, 0xef,
	0x19, 0x60, 0xfe, 0x61, 0x1d, 0x9f, 0x9f, 0x21, 0x5f, 0x4e, 0x7c, 0x97, 0x9e, 0x63, 0x54, 0x70,
	0x11, 0x8a, 0xed, 0x6f, 0x16, 0xa9, 0x3c, 0x2b, 0x52, 0x4a, 0x83, 0x0b, 0xd8, 0xa0, 0xcb, 0x38,
	0xa9, 0xb1, 0xed, 0x9f, 0x81, 0x3c, 0x25, 0x8e, 0x91, 0x56, 0xa1, 0x8d, 0x55, 0x2b, 0x41, 0xbe,
	0xf5, 0xf8, 0x8f, 0xf7, 0xa5, 0x83, 0x5d, 0xe8, 0x90, 0x88, 0xe8, 0xae, 0x6b, 0x31, 0xfd, 0x01,
	0x08, 0x4f, 0x43, 0x37, 0x98, 0x48, 0x7f, 0x29, 0xd7, 0x47, 0xc3, 0xa3, 0xa7, 0xc3, 0xd1, 0x65,
	0x9d, 0xfd, 0x07, 0xf0, 0xe9, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x78, 0xf1, 0x72, 0x34, 0x11,
	0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FaceMatchServiceClient is the client API for FaceMatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceMatchServiceClient interface {
	// A simple RPC.
	//
	// Obtains the top N matched face ID for a given face feature.
	//
	// A list of identity ID with matching score is returned. 1:N match while
	// N is pre-stored in face match server.
	GetIdentityID(ctx context.Context, in *FaceMatchRequest, opts ...grpc.CallOption) (*MatchedIdentities, error)
	// Compare the closeness of two features. 1:1 match.
	GetMatchScore(ctx context.Context, in *FeatureMatchScoreRequest, opts ...grpc.CallOption) (*FeatureMatchScoreResult, error)
	// A server-to-client streaming RPC.
	//
	// for a given face feature library, obtains its stored face features
	// and corresponding identity ID. Results are streamed rather than
	// returned at once due to a huge number of face features.
	ListFaceFeatures(ctx context.Context, in *FeatureLibraryRequest, opts ...grpc.CallOption) (FaceMatchService_ListFaceFeaturesClient, error)
	// Count the number of features in memory for a given face feature library.
	CountFaceFeatures(ctx context.Context, in *FeatureLibraryRequest, opts ...grpc.CallOption) (*Count, error)
	// List all face feature libraries
	GetFeatureLibraries(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FeatureLibraries, error)
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of face features to update the currently stored face
	// features. If the same identity id and feature id exist in the system,
	// then it would update the associated face feature with the new one.
	// Otherwise, it will append it as a new face feature in the server.
	UpdateFaceFeatures(ctx context.Context, opts ...grpc.CallOption) (FaceMatchService_UpdateFaceFeaturesClient, error)
	// An identity id may have multiple face features for face matching.
	// This function will delete all associated face features for a given
	// feature library.
	DeleteFaceFeatures(ctx context.Context, in *IdentityRequest, opts ...grpc.CallOption) (*FeatureLibraryUpdates, error)
	// Delete features which are specified by library + identity_id + feature_id_ary
	DeleteFeatures(ctx context.Context, in *DelFeaturesRequest, opts ...grpc.CallOption) (*FeatureLibraryUpdates, error)
	// This function will delete all face features of the specified feature
	// library from the face match server.
	DeleteFaceFeatureLibrary(ctx context.Context, in *FeatureLibraryRequest, opts ...grpc.CallOption) (*FeatureLibraryUpdates, error)
}

type faceMatchServiceClient struct {
	cc *grpc.ClientConn
}

func NewFaceMatchServiceClient(cc *grpc.ClientConn) FaceMatchServiceClient {
	return &faceMatchServiceClient{cc}
}

func (c *faceMatchServiceClient) GetIdentityID(ctx context.Context, in *FaceMatchRequest, opts ...grpc.CallOption) (*MatchedIdentities, error) {
	out := new(MatchedIdentities)
	err := c.cc.Invoke(ctx, "/face_service.FaceMatchService/GetIdentityID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceMatchServiceClient) GetMatchScore(ctx context.Context, in *FeatureMatchScoreRequest, opts ...grpc.CallOption) (*FeatureMatchScoreResult, error) {
	out := new(FeatureMatchScoreResult)
	err := c.cc.Invoke(ctx, "/face_service.FaceMatchService/GetMatchScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceMatchServiceClient) ListFaceFeatures(ctx context.Context, in *FeatureLibraryRequest, opts ...grpc.CallOption) (FaceMatchService_ListFaceFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FaceMatchService_serviceDesc.Streams[0], "/face_service.FaceMatchService/ListFaceFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &faceMatchServiceListFaceFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FaceMatchService_ListFaceFeaturesClient interface {
	Recv() (*FeatureUpdate, error)
	grpc.ClientStream
}

type faceMatchServiceListFaceFeaturesClient struct {
	grpc.ClientStream
}

func (x *faceMatchServiceListFaceFeaturesClient) Recv() (*FeatureUpdate, error) {
	m := new(FeatureUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *faceMatchServiceClient) CountFaceFeatures(ctx context.Context, in *FeatureLibraryRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/face_service.FaceMatchService/CountFaceFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceMatchServiceClient) GetFeatureLibraries(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FeatureLibraries, error) {
	out := new(FeatureLibraries)
	err := c.cc.Invoke(ctx, "/face_service.FaceMatchService/GetFeatureLibraries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceMatchServiceClient) UpdateFaceFeatures(ctx context.Context, opts ...grpc.CallOption) (FaceMatchService_UpdateFaceFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FaceMatchService_serviceDesc.Streams[1], "/face_service.FaceMatchService/UpdateFaceFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &faceMatchServiceUpdateFaceFeaturesClient{stream}
	return x, nil
}

type FaceMatchService_UpdateFaceFeaturesClient interface {
	Send(*FeatureUpdate) error
	CloseAndRecv() (*FeatureLibraryUpdates, error)
	grpc.ClientStream
}

type faceMatchServiceUpdateFaceFeaturesClient struct {
	grpc.ClientStream
}

func (x *faceMatchServiceUpdateFaceFeaturesClient) Send(m *FeatureUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *faceMatchServiceUpdateFaceFeaturesClient) CloseAndRecv() (*FeatureLibraryUpdates, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FeatureLibraryUpdates)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *faceMatchServiceClient) DeleteFaceFeatures(ctx context.Context, in *IdentityRequest, opts ...grpc.CallOption) (*FeatureLibraryUpdates, error) {
	out := new(FeatureLibraryUpdates)
	err := c.cc.Invoke(ctx, "/face_service.FaceMatchService/DeleteFaceFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceMatchServiceClient) DeleteFeatures(ctx context.Context, in *DelFeaturesRequest, opts ...grpc.CallOption) (*FeatureLibraryUpdates, error) {
	out := new(FeatureLibraryUpdates)
	err := c.cc.Invoke(ctx, "/face_service.FaceMatchService/DeleteFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceMatchServiceClient) DeleteFaceFeatureLibrary(ctx context.Context, in *FeatureLibraryRequest, opts ...grpc.CallOption) (*FeatureLibraryUpdates, error) {
	out := new(FeatureLibraryUpdates)
	err := c.cc.Invoke(ctx, "/face_service.FaceMatchService/DeleteFaceFeatureLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceMatchServiceServer is the server API for FaceMatchService service.
type FaceMatchServiceServer interface {
	// A simple RPC.
	//
	// Obtains the top N matched face ID for a given face feature.
	//
	// A list of identity ID with matching score is returned. 1:N match while
	// N is pre-stored in face match server.
	GetIdentityID(context.Context, *FaceMatchRequest) (*MatchedIdentities, error)
	// Compare the closeness of two features. 1:1 match.
	GetMatchScore(context.Context, *FeatureMatchScoreRequest) (*FeatureMatchScoreResult, error)
	// A server-to-client streaming RPC.
	//
	// for a given face feature library, obtains its stored face features
	// and corresponding identity ID. Results are streamed rather than
	// returned at once due to a huge number of face features.
	ListFaceFeatures(*FeatureLibraryRequest, FaceMatchService_ListFaceFeaturesServer) error
	// Count the number of features in memory for a given face feature library.
	CountFaceFeatures(context.Context, *FeatureLibraryRequest) (*Count, error)
	// List all face feature libraries
	GetFeatureLibraries(context.Context, *EmptyRequest) (*FeatureLibraries, error)
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of face features to update the currently stored face
	// features. If the same identity id and feature id exist in the system,
	// then it would update the associated face feature with the new one.
	// Otherwise, it will append it as a new face feature in the server.
	UpdateFaceFeatures(FaceMatchService_UpdateFaceFeaturesServer) error
	// An identity id may have multiple face features for face matching.
	// This function will delete all associated face features for a given
	// feature library.
	DeleteFaceFeatures(context.Context, *IdentityRequest) (*FeatureLibraryUpdates, error)
	// Delete features which are specified by library + identity_id + feature_id_ary
	DeleteFeatures(context.Context, *DelFeaturesRequest) (*FeatureLibraryUpdates, error)
	// This function will delete all face features of the specified feature
	// library from the face match server.
	DeleteFaceFeatureLibrary(context.Context, *FeatureLibraryRequest) (*FeatureLibraryUpdates, error)
}

// UnimplementedFaceMatchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFaceMatchServiceServer struct {
}

func (*UnimplementedFaceMatchServiceServer) GetIdentityID(ctx context.Context, req *FaceMatchRequest) (*MatchedIdentities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityID not implemented")
}
func (*UnimplementedFaceMatchServiceServer) GetMatchScore(ctx context.Context, req *FeatureMatchScoreRequest) (*FeatureMatchScoreResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchScore not implemented")
}
func (*UnimplementedFaceMatchServiceServer) ListFaceFeatures(req *FeatureLibraryRequest, srv FaceMatchService_ListFaceFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFaceFeatures not implemented")
}
func (*UnimplementedFaceMatchServiceServer) CountFaceFeatures(ctx context.Context, req *FeatureLibraryRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFaceFeatures not implemented")
}
func (*UnimplementedFaceMatchServiceServer) GetFeatureLibraries(ctx context.Context, req *EmptyRequest) (*FeatureLibraries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureLibraries not implemented")
}
func (*UnimplementedFaceMatchServiceServer) UpdateFaceFeatures(srv FaceMatchService_UpdateFaceFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateFaceFeatures not implemented")
}
func (*UnimplementedFaceMatchServiceServer) DeleteFaceFeatures(ctx context.Context, req *IdentityRequest) (*FeatureLibraryUpdates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFaceFeatures not implemented")
}
func (*UnimplementedFaceMatchServiceServer) DeleteFeatures(ctx context.Context, req *DelFeaturesRequest) (*FeatureLibraryUpdates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatures not implemented")
}
func (*UnimplementedFaceMatchServiceServer) DeleteFaceFeatureLibrary(ctx context.Context, req *FeatureLibraryRequest) (*FeatureLibraryUpdates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFaceFeatureLibrary not implemented")
}

func RegisterFaceMatchServiceServer(s *grpc.Server, srv FaceMatchServiceServer) {
	s.RegisterService(&_FaceMatchService_serviceDesc, srv)
}

func _FaceMatchService_GetIdentityID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceMatchServiceServer).GetIdentityID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/face_service.FaceMatchService/GetIdentityID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceMatchServiceServer).GetIdentityID(ctx, req.(*FaceMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceMatchService_GetMatchScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureMatchScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceMatchServiceServer).GetMatchScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/face_service.FaceMatchService/GetMatchScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceMatchServiceServer).GetMatchScore(ctx, req.(*FeatureMatchScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceMatchService_ListFaceFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FeatureLibraryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FaceMatchServiceServer).ListFaceFeatures(m, &faceMatchServiceListFaceFeaturesServer{stream})
}

type FaceMatchService_ListFaceFeaturesServer interface {
	Send(*FeatureUpdate) error
	grpc.ServerStream
}

type faceMatchServiceListFaceFeaturesServer struct {
	grpc.ServerStream
}

func (x *faceMatchServiceListFaceFeaturesServer) Send(m *FeatureUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _FaceMatchService_CountFaceFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceMatchServiceServer).CountFaceFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/face_service.FaceMatchService/CountFaceFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceMatchServiceServer).CountFaceFeatures(ctx, req.(*FeatureLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceMatchService_GetFeatureLibraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceMatchServiceServer).GetFeatureLibraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/face_service.FaceMatchService/GetFeatureLibraries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceMatchServiceServer).GetFeatureLibraries(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceMatchService_UpdateFaceFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FaceMatchServiceServer).UpdateFaceFeatures(&faceMatchServiceUpdateFaceFeaturesServer{stream})
}

type FaceMatchService_UpdateFaceFeaturesServer interface {
	SendAndClose(*FeatureLibraryUpdates) error
	Recv() (*FeatureUpdate, error)
	grpc.ServerStream
}

type faceMatchServiceUpdateFaceFeaturesServer struct {
	grpc.ServerStream
}

func (x *faceMatchServiceUpdateFaceFeaturesServer) SendAndClose(m *FeatureLibraryUpdates) error {
	return x.ServerStream.SendMsg(m)
}

func (x *faceMatchServiceUpdateFaceFeaturesServer) Recv() (*FeatureUpdate, error) {
	m := new(FeatureUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FaceMatchService_DeleteFaceFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceMatchServiceServer).DeleteFaceFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/face_service.FaceMatchService/DeleteFaceFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceMatchServiceServer).DeleteFaceFeatures(ctx, req.(*IdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceMatchService_DeleteFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceMatchServiceServer).DeleteFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/face_service.FaceMatchService/DeleteFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceMatchServiceServer).DeleteFeatures(ctx, req.(*DelFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceMatchService_DeleteFaceFeatureLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceMatchServiceServer).DeleteFaceFeatureLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/face_service.FaceMatchService/DeleteFaceFeatureLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceMatchServiceServer).DeleteFaceFeatureLibrary(ctx, req.(*FeatureLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaceMatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "face_service.FaceMatchService",
	HandlerType: (*FaceMatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIdentityID",
			Handler:    _FaceMatchService_GetIdentityID_Handler,
		},
		{
			MethodName: "GetMatchScore",
			Handler:    _FaceMatchService_GetMatchScore_Handler,
		},
		{
			MethodName: "CountFaceFeatures",
			Handler:    _FaceMatchService_CountFaceFeatures_Handler,
		},
		{
			MethodName: "GetFeatureLibraries",
			Handler:    _FaceMatchService_GetFeatureLibraries_Handler,
		},
		{
			MethodName: "DeleteFaceFeatures",
			Handler:    _FaceMatchService_DeleteFaceFeatures_Handler,
		},
		{
			MethodName: "DeleteFeatures",
			Handler:    _FaceMatchService_DeleteFeatures_Handler,
		},
		{
			MethodName: "DeleteFaceFeatureLibrary",
			Handler:    _FaceMatchService_DeleteFaceFeatureLibrary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFaceFeatures",
			Handler:       _FaceMatchService_ListFaceFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateFaceFeatures",
			Handler:       _FaceMatchService_UpdateFaceFeatures_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "face.proto",
}

// FaceServiceClient is the client API for FaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceServiceClient interface {
	// Face related image process. This one request can performance a combination
	// of three actions: face detection, anti-spoof check, and face feature
	// extraction
	FaceProcess(ctx context.Context, in *FaceRequest, opts ...grpc.CallOption) (*FaceReply, error)
}

type faceServiceClient struct {
	cc *grpc.ClientConn
}

func NewFaceServiceClient(cc *grpc.ClientConn) FaceServiceClient {
	return &faceServiceClient{cc}
}

func (c *faceServiceClient) FaceProcess(ctx context.Context, in *FaceRequest, opts ...grpc.CallOption) (*FaceReply, error) {
	out := new(FaceReply)
	err := c.cc.Invoke(ctx, "/face_service.FaceService/FaceProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceServiceServer is the server API for FaceService service.
type FaceServiceServer interface {
	// Face related image process. This one request can performance a combination
	// of three actions: face detection, anti-spoof check, and face feature
	// extraction
	FaceProcess(context.Context, *FaceRequest) (*FaceReply, error)
}

// UnimplementedFaceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFaceServiceServer struct {
}

func (*UnimplementedFaceServiceServer) FaceProcess(ctx context.Context, req *FaceRequest) (*FaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaceProcess not implemented")
}

func RegisterFaceServiceServer(s *grpc.Server, srv FaceServiceServer) {
	s.RegisterService(&_FaceService_serviceDesc, srv)
}

func _FaceService_FaceProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServiceServer).FaceProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/face_service.FaceService/FaceProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServiceServer).FaceProcess(ctx, req.(*FaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "face_service.FaceService",
	HandlerType: (*FaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FaceProcess",
			Handler:    _FaceService_FaceProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "face.proto",
}

// FaceIdentityServiceClient is the client API for FaceIdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceIdentityServiceClient interface {
	SendFaceIdentity(ctx context.Context, in *Faces, opts ...grpc.CallOption) (*Empty, error)
}

type faceIdentityServiceClient struct {
	cc *grpc.ClientConn
}

func NewFaceIdentityServiceClient(cc *grpc.ClientConn) FaceIdentityServiceClient {
	return &faceIdentityServiceClient{cc}
}

func (c *faceIdentityServiceClient) SendFaceIdentity(ctx context.Context, in *Faces, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/face_service.FaceIdentityService/SendFaceIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceIdentityServiceServer is the server API for FaceIdentityService service.
type FaceIdentityServiceServer interface {
	SendFaceIdentity(context.Context, *Faces) (*Empty, error)
}

// UnimplementedFaceIdentityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFaceIdentityServiceServer struct {
}

func (*UnimplementedFaceIdentityServiceServer) SendFaceIdentity(ctx context.Context, req *Faces) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFaceIdentity not implemented")
}

func RegisterFaceIdentityServiceServer(s *grpc.Server, srv FaceIdentityServiceServer) {
	s.RegisterService(&_FaceIdentityService_serviceDesc, srv)
}

func _FaceIdentityService_SendFaceIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Faces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceIdentityServiceServer).SendFaceIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/face_service.FaceIdentityService/SendFaceIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceIdentityServiceServer).SendFaceIdentity(ctx, req.(*Faces))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaceIdentityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "face_service.FaceIdentityService",
	HandlerType: (*FaceIdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFaceIdentity",
			Handler:    _FaceIdentityService_SendFaceIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "face.proto",
}
